// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewCar extends ethereum.Event {
  get params(): NewCar__Params {
    return new NewCar__Params(this);
  }
}

export class NewCar__Params {
  _event: NewCar;

  constructor(event: NewCar) {
    this._event = event;
  }

  get carAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CarFactory extends ethereum.SmartContract {
  static bind(address: Address): CarFactory {
    return new CarFactory("CarFactory", address);
  }

  getCarSpec(_car: Address): string {
    let result = super.call("getCarSpec", "getCarSpec(address):(string)", [
      ethereum.Value.fromAddress(_car)
    ]);

    return result[0].toString();
  }

  try_getCarSpec(_car: Address): ethereum.CallResult<string> {
    let result = super.tryCall("getCarSpec", "getCarSpec(address):(string)", [
      ethereum.Value.fromAddress(_car)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getCarSpecification(): string {
    let result = super.call(
      "getCarSpecification",
      "getCarSpecification():(string)",
      []
    );

    return result[0].toString();
  }

  try_getCarSpecification(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getCarSpecification",
      "getCarSpecification():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AddCarCall extends ethereum.Call {
  get inputs(): AddCarCall__Inputs {
    return new AddCarCall__Inputs(this);
  }

  get outputs(): AddCarCall__Outputs {
    return new AddCarCall__Outputs(this);
  }
}

export class AddCarCall__Inputs {
  _call: AddCarCall;

  constructor(call: AddCarCall) {
    this._call = call;
  }

  get _carname(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddCarCall__Outputs {
  _call: AddCarCall;

  constructor(call: AddCarCall) {
    this._call = call;
  }
}
